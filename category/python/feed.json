{
    "version": "https://jsonfeed.org/version/1",
    "title": "The course of true love never did run smooth. • All posts by \"python\" category",
    "description": "人生海海  山山而川  不过尔尔",
    "home_page_url": "https://mfx.icu",
    "items": [
        {
            "id": "https://mfx.icu/2020/12/16/Python-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/",
            "url": "https://mfx.icu/2020/12/16/Python-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/",
            "title": "Python--垃圾回收机制",
            "date_published": "2020-12-16T13:14:18.000Z",
            "content_html": "<h1 id=\"引用计数\"><a class=\"markdownIt-Anchor\" href=\"#引用计数\">#</a> 引用计数</h1>\n<blockquote>\n<p><code>Python垃圾回收</code> 主要以 <code>引用计数</code> 为主， <code>分代回收</code> 为辅。在 Python 中每一个对象的核心就是一个结构体 <code>PyObject</code> ，它的内部有一个 <code>引用计数器（ob_refcnt）</code> 。程序在运行的过程中会实时的更新 <code>ob_refcnt</code>  的值，来反映引用当前对象的名称数量。当某对象的引用计数值为 <code>0</code> , 那么它的内存就会被立即释放掉。</p>\n</blockquote>\n<ol>\n<li><ins class=\"dot\">以下情况是导致引用计数加一的情况:</ins></li>\n</ol>\n<ul>\n<li>对象被创建，例如 a=2</li>\n<li>对象被引用，b=a</li>\n<li>对象被作为参数，传入到一个函数中</li>\n<li>对象作为一个元素，存储在容器中</li>\n</ul>\n<ol start=\"2\">\n<li><ins class=\"dot\">下面的情况则会导致引用计数减一:</ins></li>\n</ol>\n<ul>\n<li>对象别名被显示销毁 del</li>\n<li>对象别名被赋予新的对象</li>\n<li>一个对象离开他的作用域</li>\n<li>对象所在的容器被销毁或者是从容器中删除对象</li>\n</ul>\n<ol start=\"3\">\n<li>通过 <code>getrefcount()</code>  来获取引用的对象当前的引用计数</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span>  <span class=\"token class-name\">Person</span><span class=\"token punctuation\">:</span>\t\t\t\t<span class=\"token comment\"># 对象被创建 +1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p1<span class=\"token operator\">=</span>Person<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t\t\t\t<span class=\"token comment\"># 实例化 +1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p2<span class=\"token operator\">=</span>p1\t\t\t\t\t<span class=\"token comment\"># 赋值 +1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>getrefcount<span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 当前引用计数为 3</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>上面 p1 虽然赋值给了 p2 但是不会开辟新的内存空间，通过 <code>id()</code>  来进行查看</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span>  <span class=\"token class-name\">Person</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p1<span class=\"token operator\">=</span>Person<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p2<span class=\"token operator\">=</span>p1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t\t\t<span class=\"token comment\"># 打印结果：1279802481016</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t\t\t<span class=\"token comment\"># 打印结果：1279802481016</span></pre></td></tr></table></figure><h1 id=\"标记清除解决循环引用\"><a class=\"markdownIt-Anchor\" href=\"#标记清除解决循环引用\">#</a> 标记清除解决循环引用</h1>\n<blockquote>\n<p>Python 采用了 <code>“标记-清除”(Mark and Sweep)算法</code> ，解决容器对象可能产生的循环引用问题。</p>\n</blockquote>\n<div class=\"note warning\">\n<p>注意，只有 <code>容器对象</code> 才会产生循环引用的情况，比如 <code>列表</code> 、 <code>字典</code> 、 <code>用户自定义类的对象</code> 、 <code>元组</code> 等。而像 <code>数字</code> ， <code>字符串</code> 这类简单类型不会出现循环引用。作为一种优化策略，对于只包含简单类型的元组也不在标记清除算法的考虑之列</p>\n</div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> objgraph</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> gc</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 循环引用</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>p <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>d <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>p<span class=\"token punctuation\">.</span>pet <span class=\"token operator\">=</span> d</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>d<span class=\"token punctuation\">.</span>master <span class=\"token operator\">=</span> p</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">del</span> p</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">del</span> d</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>gc<span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#手动触发垃圾回收</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>objgraph<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token string\">\"Person\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\"># 打印结果：0</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>objgraph<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token string\">\"Dog\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\"># 打印结果：0</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>对象间互相引用，导致对象不能通过引用计数器进行销毁</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>手动触发垃圾回收，挥手循环引用</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>'''</span></pre></td></tr></table></figure><h1 id=\"分代回收\"><a class=\"markdownIt-Anchor\" href=\"#分代回收\">#</a> 分代回收</h1>\n<blockquote>\n<p>在循环引用对象的回收中，整个应用程序会被暂停，为了减少应用程序暂停的时间，Python 通过 <code>分代回收(Generational Collection)</code>  以 <code>空间</code> 换 <code>时间</code> 的方法提高垃圾回收效率。</p>\n</blockquote>\n<p>分代回收是基于这样的一个统计事实，<strong>对于程序，存在一定比例的内存块的生存周期比较短；而剩下的内存块，生存周期会比较长，甚至会从程序开始一直持续到程序结束。生存期较短对象的比例通常在 80%～90% 之间，这种思想简单点说就是：对象存在时间越长，越可能不是垃圾，应该越少去收集。这样在执行标记 - 清除算法时可以有效减小遍历的对象数，从而提高垃圾回收的速度。</strong></p>\n<p><code>python gc</code>  给对象定义了三种世代 (0,1,2), 每一个新生对象在 <code>generation zero</code>  中，如果它在一轮 <code>gc</code>  扫描中活了下来，那么它将被移至 <code>generation one</code> , 在那里他将较少的被扫描，如果它又活过了一轮 gc, 它又将被移至 <code>generation two</code> ，在那里它被扫描的次数将会更少。</p>\n",
            "tags": []
        }
    ]
}