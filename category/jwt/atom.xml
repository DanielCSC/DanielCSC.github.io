<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://mfx.icu</id>
    <title>The course of true love never did run smooth. • Posts by &#34;jwt&#34; category</title>
    <link href="https://mfx.icu" />
    <updated>2020-04-12T11:39:37.000Z</updated>
    <category term="SQL" />
    <category term="JWT" />
    <category term="Celery" />
    <category term="序列化器" />
    <category term="ORM" />
    <category term="OAuth2.0" />
    <category term="jwt" />
    <category term="redis" />
    <category term="vue生命周期" />
    <category term="UI组件" />
    <category term="生产环境部署" />
    <category term="Docker" />
    <category term="Docker_Desktop" />
    <category term="Git" />
    <category term="数据可视化库" />
    <category term="WebSocket" />
    <category term="Navicat" />
    <category term="Mysql" />
    <entry>
        <id>https://mfx.icu/2020/04/12/JWT/</id>
        <title>JWT--JSON WEB TOKEN</title>
        <link rel="alternate" href="https://mfx.icu/2020/04/12/JWT/"/>
        <content type="html">&lt;h1 id=&#34;json-web-token&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#json-web-token&#34;&gt;#&lt;/a&gt; Json Web Token&lt;/h1&gt;
&lt;h3 id=&#34;什么是jwt&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是jwt&#34;&gt;#&lt;/a&gt; 什么是 JWT&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于 JSON 的开放标准 (RFC 7519). 该 token 被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT 的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该 token 也可直接被用于认证，也可被加密。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;说起 JWT，我们应该来谈一谈基于 token 的认证和传统的 session 认证的区别。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;传统的session认证&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#传统的session认证&#34;&gt;#&lt;/a&gt; 传统的 session 认证&lt;/h3&gt;
&lt;p&gt;我们知道，http 协议本身是一种无状态的协议，而这就意味着如果用户向我们的应用提供了用户名和密码来进行用户认证，那么下一次请求时，用户还要再一次进行用户认证才行，因为根据 http 协议，我们并不能知道是哪个用户发出的请求，所以为了让我们的应用能识别是哪个用户发出的请求，我们只能在服务器存储一份用户登录的信息，这份登录信息会在响应时传递给浏览器，告诉其保存为 cookie, 以便下次请求时发送给我们的应用，这样我们的应用就能识别请求来自哪个用户了，这就是传统的基于 session 认证。&lt;/p&gt;
&lt;p&gt;但是这种基于 session 的认证使应用本身很难得到扩展，随着不同客户端用户的增加，独立的服务器已无法承载更多的用户，而这时候基于 session 认证应用的问题就会暴露出来.&lt;/p&gt;
&lt;h3 id=&#34;基于session认证所显露的问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基于session认证所显露的问题&#34;&gt;#&lt;/a&gt; 基于 session 认证所显露的问题&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Session&lt;/strong&gt;: 每个用户经过我们的应用认证之后，我们的应用都要在服务端做一次记录，以方便用户下次请求的鉴别，通常而言 session 都是保存在内存中，而随着认证用户的增多，服务端的开销会明显增大。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;扩展性&lt;/strong&gt;：用户认证之后，服务端做认证记录，如果认证的记录被保存在内存中的话，这意味着用户下次请求还必须要请求在这台服务器上，这样才能拿到授权的资源，这样在分布式的应用上，相应的限制了负载均衡器的能力。这也意味着限制了应用的扩展能力。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CSRF&lt;/strong&gt;: 因为是基于 cookie 来进行用户识别的，cookie 如果被截获，用户就会很容易受到跨站请求伪造的攻击。&lt;/p&gt;
&lt;h3 id=&#34;jwt与session的差异&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#jwt与session的差异&#34;&gt;#&lt;/a&gt; JWT 与 Session 的差异&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;相同点是，它们都是存储用户信息；然而，Session 是在服务器端的，而 JWT 是在客户端的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Session 方式存储用户信息的最大问题在于要占用大量服务器内存，增加服务器的开销。而 JWT 方式将用户状态分散到了客户端中，可以明显减轻服务端的内存压力。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Session 的状态是存储在服务器端，客户端只有 session id；而 Token 的状态是存储在客户端。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;基于token的鉴权机制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基于token的鉴权机制&#34;&gt;#&lt;/a&gt; 基于 token 的鉴权机制&lt;/h3&gt;
&lt;p&gt;基于 token 的鉴权机制类似于 http 协议也是无状态的，它不需要在服务端去保留用户的认证信息或者会话信息。这就意味着基于 token 认证机制的应用不需要去考虑用户在哪一台服务器登录了，这就为应用的扩展提供了便利。&lt;/p&gt;
&lt;p&gt;流程上是这样的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户使用用户名密码来请求服务器&lt;/li&gt;
&lt;li&gt;服务器进行验证用户的信息&lt;/li&gt;
&lt;li&gt;服务器通过验证发送给用户一个 token&lt;/li&gt;
&lt;li&gt;客户端存储 token，并在每次请求时附送上这个 token 值&lt;/li&gt;
&lt;li&gt;服务端验证 token 值，并返回数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;jwt长什么样&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#jwt长什么样&#34;&gt;#&lt;/a&gt; JWT 长什么样&lt;/h3&gt;
&lt;p&gt;JWT 是由三段信息构成的，将这三段信息文本用 &lt;code&gt;.&lt;/code&gt;  链接一起就构成了 Jwt 字符串&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cThIIoDvwdueQB468K5xDc5633seEFoqwxjF_xSJyQQ&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;jwt的构成&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#jwt的构成&#34;&gt;#&lt;/a&gt; JWT 的构成&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;第一部分我们称它为头部（header)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二部分我们称其为载荷（payload)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第三部分是签证（signature)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;头部header&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#头部header&#34;&gt;#&lt;/a&gt; 头部（header）&lt;/h4&gt;
&lt;p&gt;jwt 的头部承载两部分信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;声明类型，这里是 jwt&lt;/li&gt;
&lt;li&gt;声明加密的算法 通常直接使用 HMAC SHA256&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token string&#34;&gt;&#39;typ&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;JWT&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token string&#34;&gt;&#39;alg&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;HS256&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;然后进行 base64 加密（该加密是可以对称解密的), 构成了第一部分.&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;载荷playload&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#载荷playload&#34;&gt;#&lt;/a&gt; 载荷（playload）&lt;/h4&gt;
&lt;p&gt;载荷就是存放有效信息的地方，这些有效信息包含三个部分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;标准中注册的声明&lt;/li&gt;
&lt;li&gt;公共的声明&lt;/li&gt;
&lt;li&gt;私有的声明&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;标准中注册的声明-建议但不强制使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#标准中注册的声明-建议但不强制使用&#34;&gt;#&lt;/a&gt; &lt;strong&gt;标准中注册的声明&lt;/strong&gt; (建议但不强制使用) :&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;iss&lt;/strong&gt;: jwt 签发者&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;sub&lt;/strong&gt;: jwt 所面向的用户&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;aud&lt;/strong&gt;: 接收 jwt 的一方&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;exp&lt;/strong&gt;: jwt 的过期时间，这个过期时间必须要大于签发时间&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;nbf&lt;/strong&gt;: 定义在什么时间之前，该 jwt 都是不可用的.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;iat&lt;/strong&gt;: jwt 的签发时间&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;jti&lt;/strong&gt;: jwt 的唯一身份标识，主要用来作为一次性 token, 从而回避重放攻击。&lt;/p&gt;
&lt;h5 id=&#34;公共的声明&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#公共的声明&#34;&gt;#&lt;/a&gt; 公共的声明：&lt;/h5&gt;
&lt;p&gt;公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息。但不建议添加 &lt;code&gt;敏感信息&lt;/code&gt; ，因为该部分在客户端可解密.&lt;/p&gt;
&lt;h5 id=&#34;私有的声明&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#私有的声明&#34;&gt;#&lt;/a&gt; &lt;strong&gt;私有的声明&lt;/strong&gt; ：&lt;/h5&gt;
&lt;p&gt;私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为 base64 是对称解密的，意味着该部分信息可以归类为明文信息。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token string&#34;&gt;&#34;sub&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;1234567890&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token string&#34;&gt;&#34;name&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;John Doe&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token string&#34;&gt;&#34;iat&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1516239022&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;然后进行 base64 加密，得到 Jwt 的第二部分&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;签证signature&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#签证signature&#34;&gt;#&lt;/a&gt; 签证（signature）&lt;/h4&gt;
&lt;p&gt;jwt 的第三部分是一个签证信息，这个签证信息由三部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;header (base64 后的)&lt;/li&gt;
&lt;li&gt;payload (base64 后的)&lt;/li&gt;
&lt;li&gt;secret&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个部分需要 base64 加密后的 header 和 base64 加密后的 payload 使用 &lt;code&gt;.&lt;/code&gt;  连接组成的字符串，然后通过 header 中声明的加密方式进行加盐 &lt;code&gt;secret&lt;/code&gt;  组合加密，然后就构成了 jwt 的第三部分。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;HMACSHA256&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;base64UrlEncode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;header&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;.&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; base64UrlEncode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;payload&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;secret&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;将这三部分用 &lt;code&gt;.&lt;/code&gt;  连接成一个完整的字符串，构成了最终的 jwt:&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cThIIoDvwdueQB468K5xDc5633seEFoqwxjF_xSJyQQ&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;注意：secret是保存在服务器端的，jwt的签发生成也是在服务器端的，secret就是用来进行jwt的签发和jwt的验证，所以，它就是你服务端的私钥，在任何场景都不应该流露出去。一旦客户端得知这个secret, 那就意味着客户端是可以自我签发jwt了。&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;下列场景中使用json-web-token是很有用的&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#下列场景中使用json-web-token是很有用的&#34;&gt;#&lt;/a&gt; 下列场景中使用 JSON Web Token 是很有用的：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Authorization (授权) : 这是使用 JWT 的最常见场景。一旦用户登录，后续每个请求都将包含 JWT，允许用户访问该令牌允许的路由、服务和资源。单点登录是现在广泛使用的 JWT 的一个特性，因为它的开销很小，并且可以轻松地跨域使用。&lt;/li&gt;
&lt;li&gt;Information Exchange (信息交换) : 对于安全的在各方之间传输信息而言，JSON Web Tokens 无疑是一种很好的方式。因为 JWT 可以被签名，例如，用公钥 / 私钥对，你可以确定发送人就是它们所说的那个人。另外，由于签名是使用头和有效负载计算的，您还可以验证内容没有被篡改。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;jwt与oauth20的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#jwt与oauth20的区别&#34;&gt;#&lt;/a&gt; JWT 与 OAuth2.0 的区别&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;OAuth2.0 是一种授权框架 ，JWT 是一种认证协议&lt;/li&gt;
&lt;li&gt;无论使用哪种方式切记用 HTTPS 来保证数据的安全性&lt;/li&gt;
&lt;li&gt;OAuth2.0 用在使用第三方账号登录的情况 (比如使用 weibo, qq, github 登录某个 app)，而 JWT 是用在前后端分离，需要简单的对后台 API 进行保护时使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;总结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h3&gt;
&lt;h4 id=&#34;优点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#优点&#34;&gt;#&lt;/a&gt; 优点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;因为 json 的通用性，所以 JWT 是可以进行跨语言支持的，像 Python,Java,JavaScript,PHP 等很多语言都可以使用。&lt;/li&gt;
&lt;li&gt;因为有了 payload 部分，所以 JWT 可以在自身存储一些其他业务逻辑所必要的非敏感信息。&lt;/li&gt;
&lt;li&gt;便于传输，jwt 的构成非常简单，字节占用很小，所以它是非常便于传输的。&lt;/li&gt;
&lt;li&gt;它不需要在服务端保存会话信息，所以它易于应用的扩展&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;安全相关&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#安全相关&#34;&gt;#&lt;/a&gt; 安全相关&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;不应该在 jwt 的 payload 部分存放敏感信息，因为该部分是客户端可解密的部分。&lt;/li&gt;
&lt;li&gt;保护好 secret 私钥，该私钥非常重要。&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="jwt" />
        <updated>2020-04-12T11:39:37.000Z</updated>
    </entry>
</feed>
