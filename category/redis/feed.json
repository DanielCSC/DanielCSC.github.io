{
    "version": "https://jsonfeed.org/version/1",
    "title": "The course of true love never did run smooth. • All posts by \"redis\" category",
    "description": "人生海海  山山而川  不过尔尔",
    "home_page_url": "https://mfx.icu",
    "items": [
        {
            "id": "https://mfx.icu/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/Redis-%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9-%E5%87%BB%E7%A9%BF-%E7%A9%BF%E9%80%8F/",
            "url": "https://mfx.icu/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/Redis-%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9-%E5%87%BB%E7%A9%BF-%E7%A9%BF%E9%80%8F/",
            "title": "Redis--缓存雪崩,击穿,穿透",
            "date_published": "2020-12-30T11:57:46.000Z",
            "content_html": "<h1 id=\"雪崩\"><a class=\"markdownIt-Anchor\" href=\"#雪崩\">#</a> 雪崩</h1>\n<blockquote>\n<p>雪崩就是指缓存中大批量热点数据过期后系统涌入大量查询请求，因为大部分数据在 <code>Redis</code>  层已经失效，请求渗透到 <code>DB</code> ，引起数据库压力造成查询堵塞甚至 <code>宕机</code> 。</p>\n</blockquote>\n<p><span class=\"label info\">举个简单的例子</span></p>\n<p>一个电商平台，如果首页所有的 Key 失效时间都是 12 小时，零点有个限时秒杀活动大量用户杀来，假设当时 6000/s 个请求，本来缓存可以顶住 5000/s 个请求，但是当时所有缓存的 Key 都失效了，这时每秒 6000 个请求全部落在数据库，犹如洪水决堤，造成宕机。</p>\n<p><span class=\"label primary\">解决方案</span></p>\n<ol>\n<li>不设置过期时间 （不建议）</li>\n<li>设置不同的过期时间，避免同一时间大量 key 失效。比如利用随机模块生成一个过期时间，这样可以保证数据不会在同一时间大面积失效</li>\n<li>如果缓存数据库是分布式部署，将热点数据均匀分布在不同 Redis 和数据库中，有效分担压力</li>\n</ol>\n<h1 id=\"击穿\"><a class=\"markdownIt-Anchor\" href=\"#击穿\">#</a> 击穿</h1>\n<blockquote>\n<p>缓存击穿跟缓存雪崩有些类似，雪崩是大面积缓存失效，导致数据库崩溃，而缓存击穿是一个  <code>Key </code> 是热点，不停地扛住大并发请求，全都集中访问此  <code>Key</code> , 而当此 Key 过期瞬间，持续的大并发就击穿缓存，全都打在  <code>DB </code> 上，就像在完好无损的杯子上凿开一个洞。</p>\n</blockquote>\n<p><span class=\"label primary\">解决方案</span></p>\n<ol>\n<li>把这个热点 key 设置为永久有效</li>\n<li>使用互斥锁，这是比较常用的方法，简单地来说，就是在缓存失效的时候（判断拿出来的值为空），不是立即去查询数据库，而是先使用缓存工具的某些带成功操作返回值的操作（比如 Redis 的 SETNX 或者 Memcache 的 ADD）去 set 一个 mutex key，当操作返回成功时，再进行查询数据库的操作并回设缓存</li>\n</ol>\n<h1 id=\"穿透\"><a class=\"markdownIt-Anchor\" href=\"#穿透\">#</a> 穿透</h1>\n<blockquote>\n<p>指查询一个数据库一定不存在的数据。正常的使用缓存流程大致是，数据查询先进行缓存查询，如果 key 不存在或者 key 已经过期，再对数据库进行查询，并把查询到的对象，放进缓存。如果数据库查询对象为空，则不放进缓存。</p>\n</blockquote>\n<p><span class=\"label info\">举个简单的例子</span></p>\n<p>比如我传一个用户 id 为 - 1，这个用户 id 在缓存里面是肯定不存在的，所以会去数据库里面查询，如果有搞事情的人，大批量请求并传用户 id 为 - 1，那 redis 就形同虚设，无用武之地，导致数据库压力过大而崩溃。</p>\n<p><span class=\"label primary\">解决方案</span></p>\n<ol>\n<li>\n<p>在接口层增加校验，比如用户鉴权校验，不合法的参数直接返回。不相信任务调用方，根据自己提供的 API 接口规范来，作为被调用方，要考虑可能任何的参数传值。</p>\n</li>\n<li>\n<p>布隆过滤器（Bloom Filter), 能很好地防止缓存穿透。原理就是利用高效的数据结构和算法快速判断出你这个 Key 是否在  <code>DB</code>  中存在，从而避免了对底层存储系统的查询压力。</p>\n</li>\n<li>\n<p>在缓存查不到， <code>DB</code>  中也没有的情况，可以将对应的 <code>key</code>  的 value 写为 null，或者其他特殊值写入缓存，同时将过期失效时间设置短一点，以免影响正常情况。这样是可以防止反复用同一个 ID 来暴力攻击</p>\n</li>\n</ol>\n<h1 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>一般避免以上情况发生从三个时间段去分析:</p>\n<ul>\n<li>事前： <code>Redis高可用</code> ， <code>主从</code>  +  <code>哨兵</code> ， <code>Redis cluster</code> ，避免全盘崩溃</li>\n<li>事中：本地 <code>ehcache缓存</code>  +  <code>Hystrix限流</code>  +  <code>降级</code> ，避免 DB 被打死</li>\n<li>事后：Redis 持久化   <code> RDB</code> +  <code>AOF</code> ，一旦重启，自动从磁盘上加载数据，快速恢复缓存数据</li>\n</ul>\n",
            "tags": [
                "redis"
            ]
        },
        {
            "id": "https://mfx.icu/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/Redis/",
            "url": "https://mfx.icu/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/Redis/",
            "title": "初步了解--Redis",
            "date_published": "2020-10-05T03:24:42.000Z",
            "content_html": "<h1 id=\"redisremote-dictionary-server\"><a class=\"markdownIt-Anchor\" href=\"#redisremote-dictionary-server\">#</a> Redis（Remote Dictionary Server )</h1>\n<h4 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h4>\n<blockquote>\n<p>Redis (Remote Dictionary Server)，是一个开源的使用 <strong>C 语言编写</strong>、支持网络、可基于内存亦可持久化的日志型、Key-Value 数据库，并提供多种语言的 API。</p>\n<p>Redis 是一个 key-value 存储系统。和 Memcached 类似，它支持存储的 value 类型相对更多。</p>\n</blockquote>\n<blockquote>\n<p>在我们日常的 Web 开发中，都是使用数据库来进行数据的存储，由于一般的系统任务中通常不会存在高并发的情况，所以这样看起来并没有什么问题，可是一旦涉及大数据量的需求，比如一些商品抢购的情景，或者是主页访问量瞬间较大的时候，单一使用数据库来保存数据的系统会因为面向磁盘，磁盘读 / 写速度比较慢的问题而存在严重的性能弊端，一瞬间成千上万的请求到来，需要系统在极短的时间内完成成千上万次的读 / 写操作，这个时候往往不是数据库能够承受的，极其容易造成数据库系统瘫痪，最终导致服务宕机的严重生产问题。</p>\n</blockquote>\n<h4 id=\"nosql技术\"><a class=\"markdownIt-Anchor\" href=\"#nosql技术\">#</a> NoSQL 技术</h4>\n<blockquote>\n<p>为了克服上述的问题，Web 项目通常会引入 NoSQL 技术，这是一种<strong>基于内存的数据库</strong>，并且提供一定的持久化功能。</p>\n<p><strong>Redis</strong> 和<strong> MongoDB</strong> 是当前使用最广泛的 NoSQL，而就 Redis 技术而言，它的性能十分优越，可以<strong>支持每秒十几万次的读 / 写操作</strong>，其性能远超数据库，并且还<strong>支持集群、分布式、主从同步等</strong>配置，原则上可以无限扩展，让更多的数据存储在内存中，更让人欣慰的是它还<strong>支持一定的事务能力</strong>，这保证了高并发的场景下数据的安全和一致性。</p>\n</blockquote>\n<h4 id=\"redis-在-web-中的应用\"><a class=\"markdownIt-Anchor\" href=\"#redis-在-web-中的应用\">#</a> Redis 在 Web 中的应用</h4>\n<p>Redis 主要有两个应用场景：</p>\n<ul>\n<li>存储 <strong>缓存</strong> 用的数据；</li>\n<li>需要高速读 / 写的场合<strong>使用它快速读 / 写</strong>；</li>\n</ul>\n<p>接下来是 Redis 的五大数据类型和常用命令</p>\n<h4 id=\"五大数据类型\"><a class=\"markdownIt-Anchor\" href=\"#五大数据类型\">#</a> 五大数据类型</h4>\n<h6 id=\"1string-字符串\"><a class=\"markdownIt-Anchor\" href=\"#1string-字符串\">#</a> 1.String（ 字符串）</h6>\n<p>redis 中最基本的数据类型，一个 key 对应一个 value。string 类型是二进制安全的，意思是 redis 的 string 可以包含任何数据。如数字，字符串，jpg 图片或者序列化的对象。</p>\n<h6 id=\"2list列表\"><a class=\"markdownIt-Anchor\" href=\"#2list列表\">#</a> 2.List（列表）</h6>\n<p>底层为双向链表，左右两边都可以插入和删除数据，插入和删除的时间复杂度是 O (1), 索引的时间复杂度为 O (n)</p>\n<h6 id=\"3hash哈希\"><a class=\"markdownIt-Anchor\" href=\"#3hash哈希\">#</a> 3.Hash（哈希）</h6>\n<p>是一个键值 (key=&gt;value) 对集合。 hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。</p>\n<p>应用场景：假设有多个用户及对应的用户信息，可以用来存储以用户 ID 为 key，将用户信息序列化为比如 json 格式做为 value 进行保存。</p>\n<h6 id=\"4set集合\"><a class=\"markdownIt-Anchor\" href=\"#4set集合\">#</a> 4.Set（集合）</h6>\n<p>redis 中的 set 是 string 类型的无序集合，集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O (1)。</p>\n<h6 id=\"5zsetsorted-set有序集合\"><a class=\"markdownIt-Anchor\" href=\"#5zsetsorted-set有序集合\">#</a> 5.zset（Sorted Set：有序集合）</h6>\n<p>zset 和 set 一样也是 string 类型元素的集合，保留了集合不能有重复数据的特性，区别是，有序集合中的元素是可以排序的，它给每个元素设置一个 double 类型的分数，作为排序的依据</p>\n<h4 id=\"常用命令\"><a class=\"markdownIt-Anchor\" href=\"#常用命令\">#</a> 常用命令</h4>\n<h6 id=\"库管理\"><a class=\"markdownIt-Anchor\" href=\"#库管理\">#</a> 库管理</h6>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>select <span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span>\t\t\t<span class=\"token comment\"># 切换库，默认 16 个数据库：0-15，进入 redis 后默认是 0 号库</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>flushdb\t\t\t\t<span class=\"token comment\"># 清除当前数据库</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>flushall\t\t\t<span class=\"token comment\"># 清除所有库</span></pre></td></tr></table></figure><h6 id=\"string-字符串\"><a class=\"markdownIt-Anchor\" href=\"#string-字符串\">#</a> String（ 字符串）</h6>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>keys <span class=\"token operator\">*</span>\t\t\t\t<span class=\"token comment\"># 查询所有的键</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>dbsize\t\t\t\t<span class=\"token comment\"># 查询键总数，直接获取 redis 内置的键总数变量</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>exists key\t\t\t<span class=\"token comment\"># 检查键是否存在，存在返回 1 ，不存在返回 0</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">del</span> key \t\t\t<span class=\"token comment\"># 删除键，返回结果为成功删除键的个数</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>expire key second\t\t<span class=\"token comment\"># 设置某个 key 的过期时间，在 second 秒后自动删除</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ttl\tkey\t\t\t<span class=\"token comment\"># 查看被设置有效期的 key，剩余过期时间，单位为秒 -1 为没设置过期时间，-2 为 key 不存在</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">type</span> key\t\t\t<span class=\"token comment\"># 检查 key 的类型</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rename key newkey   \t\t<span class=\"token comment\"># 重命名 key</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>randomkey\t\t\t<span class=\"token comment\"># 随机返回一个 key</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">set</span> key value <span class=\"token punctuation\">[</span>ex<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>px<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>nx<span class=\"token operator\">|</span>xx<span class=\"token punctuation\">]</span>\t<span class=\"token comment\"># ex 为键值设置秒级过期时间 px 为毫秒 nx 键必须不存在，用于添加  xx 键必须存在，用于更新  setnx、setex 与 nx、ex 作用相同</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>get key \t\t\t<span class=\"token comment\"># 获取值 不存在返回 nil</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mset key value\t\t\t<span class=\"token comment\"># 批量添加</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mget key\t\t\t<span class=\"token comment\"># 批量获取 value</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>append key value\t\t<span class=\"token comment\"># 可以想字符串尾部追加 value</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>strlen key\t\t\t<span class=\"token comment\"># 字符串长度</span></pre></td></tr></table></figure><h6 id=\"hash哈希\"><a class=\"markdownIt-Anchor\" href=\"#hash哈希\">#</a> Hash（哈希）</h6>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hset key field value\t\t\t<span class=\"token comment\"># 设置值</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hget key field\t\t\t\t<span class=\"token comment\"># 获取值</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hdel key field \t\t\t\t<span class=\"token comment\"># 会删除一个或多个，返回结果为成功删除的 field 的个数</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hlen key\t\t\t\t<span class=\"token comment\"># 计算 field 的个数</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hmget key field value<span class=\"token punctuation\">[</span>field value<span class=\"token punctuation\">]</span>\t<span class=\"token comment\"># 批量设置 field-value</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hmset key field<span class=\"token punctuation\">[</span>field<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span>\t\t<span class=\"token comment\"># 批量获取 value</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexists key field\t\t\t<span class=\"token comment\"># 判断 field 是否存在</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hkeys kye\t\t\t\t<span class=\"token comment\"># 获取所有 field</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hvals kye\t\t\t\t<span class=\"token comment\"># 获取所有 value</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hgetall key \t\t\t\t<span class=\"token comment\"># 获取所有的 field、value</span></pre></td></tr></table></figure><h6 id=\"list列表\"><a class=\"markdownIt-Anchor\" href=\"#list列表\">#</a> List（列表）</h6>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>RPUSH key value \t\t\t<span class=\"token comment\"># 将某个值加入到一个 key 列表末尾</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>LPUSH key value  \t\t\t<span class=\"token comment\"># 将某个值加入到一个 key 列表头部</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>LLEN key  \t\t\t\t<span class=\"token comment\"># 列表长度</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>LRANGE key start end  \t\t\t<span class=\"token comment\"># 返回列表中某个范围的值</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>LTRIM key start end \t\t\t<span class=\"token comment\"># 只保留列表中某个范围的值</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>LINDEX key index  \t\t\t<span class=\"token comment\"># 获取列表中特定索引号的值，要注意是 O (n) 复杂度</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>LSET key index value  \t\t\t<span class=\"token comment\"># 设置列表中某个位置的值</span></pre></td></tr></table></figure><h6 id=\"set集合\"><a class=\"markdownIt-Anchor\" href=\"#set集合\">#</a> Set（集合）</h6>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sadd key member <span class=\"token punctuation\">[</span>member <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span>\t\t<span class=\"token comment\"># 返回结果为添加成功的元素个数</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>srem key member <span class=\"token punctuation\">[</span>member <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span>\t\t<span class=\"token comment\"># 返回结果为删除成功的元素个数</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>scard key\t\t\t\t<span class=\"token comment\"># 计算元素的个数</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sismember key member\t\t\t<span class=\"token comment\"># 判断元素是否在集合中，在返回 1 否则返回 0</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>srandmember key <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span>\t\t\t<span class=\"token comment\"># 随机从集合返回指定个数元素</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>smembers key \t\t\t\t<span class=\"token comment\"># 获取集合内所有元素</span></pre></td></tr></table></figure>",
            "tags": [
                "redis"
            ]
        }
    ]
}